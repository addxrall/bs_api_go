// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (user_id, title, author, genre, condition, description, image_url)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING book_id, user_id, title, author, genre, condition, description, image_url, created_at
`

type CreateBookParams struct {
	UserID      int32
	Title       string
	Author      string
	Genre       string
	Condition   string
	Description pgtype.Text
	ImageUrl    pgtype.Text
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.UserID,
		arg.Title,
		arg.Author,
		arg.Genre,
		arg.Condition,
		arg.Description,
		arg.ImageUrl,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.UserID,
		&i.Title,
		&i.Author,
		&i.Genre,
		&i.Condition,
		&i.Description,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (reviewed_user_id, reviewer_id, rating, review_text)
VALUES ($1, $2, $3, $4)
RETURNING review_id, reviewed_user_id, reviewer_id, rating, review_text, created_at
`

type CreateReviewParams struct {
	ReviewedUserID int32
	ReviewerID     int32
	Rating         int32
	ReviewText     pgtype.Text
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.ReviewedUserID,
		arg.ReviewerID,
		arg.Rating,
		arg.ReviewText,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.ReviewedUserID,
		&i.ReviewerID,
		&i.Rating,
		&i.ReviewText,
		&i.CreatedAt,
	)
	return i, err
}

const createSwapRequest = `-- name: CreateSwapRequest :one
INSERT INTO swap_requests (requester_id, book_id, status)
VALUES ($1, $2, $3)
RETURNING swap_request_id, requester_id, book_id, status, created_at, updated_at
`

type CreateSwapRequestParams struct {
	RequesterID int32
	BookID      int32
	Status      string
}

func (q *Queries) CreateSwapRequest(ctx context.Context, arg CreateSwapRequestParams) (SwapRequest, error) {
	row := q.db.QueryRow(ctx, createSwapRequest, arg.RequesterID, arg.BookID, arg.Status)
	var i SwapRequest
	err := row.Scan(
		&i.SwapRequestID,
		&i.RequesterID,
		&i.BookID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password, profile_picture_url, bio, location)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id, username, email, password, profile_picture_url, bio, location, created_at
`

type CreateUserParams struct {
	Username          string
	Email             string
	Password          string
	ProfilePictureUrl pgtype.Text
	Bio               pgtype.Text
	Location          pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ProfilePictureUrl,
		arg.Bio,
		arg.Location,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT book_id, user_id, title, author, genre, condition, description, image_url, created_at FROM books
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.UserID,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.Condition,
			&i.Description,
			&i.ImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByUserID = `-- name: GetBooksByUserID :many
SELECT book_id, user_id, title, author, genre, condition, description, image_url, created_at FROM books WHERE user_id = $1
`

func (q *Queries) GetBooksByUserID(ctx context.Context, userID int32) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.UserID,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.Condition,
			&i.Description,
			&i.ImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, username, email, password, profile_picture_url, bio, location, created_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}
